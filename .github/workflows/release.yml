name: Release
on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install dependencies
        run: bun install

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      # Add macOS certificate
      - name: Install Apple Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain

          # Import certificate
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Build the app
        env:
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.P12_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: bun run tauri build

      # Notarize the app
      - name: Notarize Release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          APP_NAME=$(grep -m1 'name:' src-tauri/tauri.conf.json | cut -d'"' -f4)
          DMG_PATH="src-tauri/target/release/bundle/dmg/${APP_NAME}_${{ github.run_number }}.dmg"

          # Create temporary files for notarization
          REQUEST_UUID=$(xcrun altool --notarize-app \
            --primary-bundle-id "com.clock-desktop.app" \
            --username "$APPLE_ID" \
            --password "$APPLE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --file "$DMG_PATH" \
            2>&1 | grep RequestUUID | awk '{print $3}')

          echo "Notarization RequestUUID: $REQUEST_UUID"

          # Wait for notarization to complete
          while true; do
            RESULT=$(xcrun altool --notarization-info "$REQUEST_UUID" \
              --username "$APPLE_ID" \
              --password "$APPLE_PASSWORD" \
              2>&1)

            if echo "${RESULT}" | grep -q "success"; then
              echo "Notarization succeeded"
              break
            elif echo "${RESULT}" | grep -q "invalid"; then
              echo "Notarization failed"
              exit 1
            fi

            echo "Waiting for notarization to complete..."
            sleep 30
          done

          # Staple the notarization to the app
          xcrun stapler staple "$DMG_PATH"

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Sign and Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          APP_NAME=$(grep -m1 'name:' src-tauri/tauri.conf.json | cut -d'"' -f4)
          DMG_PATH="src-tauri/target/release/bundle/dmg/${APP_NAME}_${{ github.run_number }}.dmg"
          gpg --armor --detach-sign "$DMG_PATH"
          gh release upload v${{ github.run_number }} "$DMG_PATH" "$DMG_PATH.asc"
